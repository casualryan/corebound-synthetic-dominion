Item Schema Guide (Streamlined Range-Based Format)

Overview
This game now supports a concise, uniform way to define any numeric stat as a rollable range. All numeric values can be given as:
- number: 12               → rolls exactly 12 (treated as 12-12)
- string: "10-15"          → rolls any value between 10 and 15 (inclusive)
- object: { min: 10, max: 15 } → same as above

Unless otherwise noted, integers are rolled for integer-looking values. Floats are rolled when decimals are present (e.g. "0.5-1.25"). Percent values defined at top-level are automatically converted to fractions where the engine expects them (e.g., 10 becomes 0.10).

Core Fields
- name: string
- type: "Weapon" | "Armor" | "Bionic" | "Material" | "Component"
- icon: string (path to icon)
- slot: equipment slot for equippable items (e.g., 'mainHand', 'offHand', 'head', 'chest', 'legs', 'feet', 'gloves', 'bionic')
- stackable: boolean (usually for materials)
- levelRequirement: number or "min-max" (rolled by the generator; used to gate equipping/buying)

Wires (Sockets)
- wires: {
  totalSlots: number | "min-max",           // total wire sockets that can roll on the item
  blackSlotsMax?: number | "min-max",       // optional cap for black (universal) sockets
  colors?: {                                  // optional color-specific min-max caps
    red?: number | "min-max",
    green?: number | "min-max",
    blue?: number | "min-max",
    black?: number | "min-max"
  }
}
- rolledWires (runtime only, created by generator): Array<{ color: 'red'|'green'|'blue'|'black', chip?: ChipRef }>
  - The generator will roll an allocation of wire colors and populate an empty list of sockets for runtime use.
  - black sockets accept any chip color; enforce maximum one black chip equipped per character across all gear.

Weapon-Specific
- weaponType: string (e.g., Sword, Staff, Dagger)
- bAttackSpeed: number or range (e.g., 1.2 or "1.0-1.5")

Common Numeric Stats (top-level, now accept ranges)
- damageTypes: { [damageType]: number | "min-max" | {min,max} }
  Example types: kinetic, slashing, pyro, cryo, electric, corrosive, radiation

- defenseTypes: { [defenseType]: number | "min-max" | {min,max} }
  Example types: sturdiness, structure, stability

- healthBonus: number | range (flat)
- energyShieldBonus: number | range (flat)
- healthBonusPercent: percent | range (top-level percent → stored as fraction) 
- energyShieldBonusPercent: percent | range (top-level percent → stored as fraction)
- attackSpeedModifier: percent | range (top-level percent → stored as fraction)
- criticalChanceModifier: percent | range (top-level percent → stored as fraction)
- criticalMultiplierModifier: percent | range (top-level percent → stored as fraction)
- precision: number | range (flat)
- deflection: number | range (flat)
- healthRegen: number | range (float)
- armorEfficiency: number | range (flat)
- weaponEfficiency: number | range (flat)
- bionicEfficiency: number | range (flat)
- bionicSync: number | range (flat)
- comboAttack: number | range (flat, % chance)
- comboEffectiveness: number | range (flat, % bonus)
- additionalComboAttacks: number | range (flat)
- armorPenetration: number | range (flat, %)

statModifiers (optional catch-all)
Use this object for any additional numeric stats you want to define. All numeric-like values can be given as number, "min-max", or { min, max }.
Special support inside statModifiers:
- damageTypes: percent modifiers by damage type (stored as +X% at item level)
  Example: { kinetic: "5-10", pyro: 8 }

- damageGroups: percent modifiers by group (stored as +X% at item level)
  Example: { physical: "5-10", elemental: "10-20" }

Any other numeric fields under statModifiers will be rolled and assigned as-is (numbers). If you provide attackSpeedModifier only here, it will be mirrored to the top-level for compatibility.

Mod pools (roll groups)
Define optional groups where the generator picks N entries from a list (with ranges). This enables things like “choose one of several damage types” or “pick two passives from a list”.

Schema:
rollGroups: [
  {
    pick: 1 | "1-2" | { min: 1, max: 3 },
    from: [
      { path: "damageTypes.kinetic", value: "10-20" },
      { path: "damageTypes.slashing", value: "10-20" }
    ]
  },
  {
    pick: "2-2", // exactly 2
    from: [
      { path: "passiveBonuses.Swift Strikes", value: "1-2" },
      { path: "passiveBonuses.Kinetic Focus", value: "1-2" },
      { path: "passiveBonuses.Slashing Focus", value: "1-2" },
      { path: "passiveBonuses.Physical Mastery", value: "1-2" }
    ]
  }
]

Notes:
- path is a dot path into the item object (e.g., damageTypes.kinetic, statModifiers.damageTypes.pyro, passiveBonuses.Some Passive, criticalChanceModifier, healthBonus, etc.)
- value supports number, "min-max", or { min, max } like the rest of the schema
- Percent top-level keys (attackSpeedModifier, criticalChanceModifier, criticalMultiplierModifier, healthBonusPercent, energyShieldBonusPercent) interpret numbers as percents (e.g., 5 → 0.05)
- Floating values like healthRegen are preserved to 2 decimals
- rollGroups are additive with guaranteed stats; use them to introduce variability across items

Passive Bonuses
- passiveBonuses: { [Passive Name]: number | "min-max" | {min,max} }

Effects (unchanged)
- effects: [
    {
      trigger: 'onHit' | 'onCritical' | 'whenHit' | ...,
      chance: number (0-1),
      action: 'dealDamage' | 'heal' | 'applyBuff' | 'applyDebuff' | ...,
      parameters: { ... }
    }
  ]

Disassembly
- isDisassembleable: boolean
- disassembleResults: Array<{ name: string, quantity: number }>

Example: Full Weapon Using Every Stat
{
  "name": "All-Stats Test Blade",
  "type": "Weapon",
  "weaponType": "Sword",
  "icon": "icons/ironsword.png",
  "slot": "mainHand",
  "levelRequirement": "10-12",
  "bAttackSpeed": "1.0-1.2",
  "damageTypes": {
    "slashing": "25-35",
    "kinetic": "5-10"
  },
  "defenseTypes": {
    "sturdiness": "0-2"
  },
  "healthBonus": "10-20",
  "energyShieldBonus": "5-10",
  "healthBonusPercent": "5-10",
  "energyShieldBonusPercent": "5-10",
  "attackSpeedModifierRange": "5-15",
  "criticalChanceModifierRange": "5-10",
  "criticalMultiplierModifierRange": "10-20",
  "precision": "2-4",
  "deflection": "1-3",
  "healthRegen": "0.25-0.5",
  "armorEfficiency": "3-7",
  "weaponEfficiency": "5-12",
  "bionicEfficiency": "0-0",
  "bionicSync": "0-0",
  "comboAttack": "3-8",
  "comboEffectiveness": "10-25",
  "additionalComboAttacks": "0-1",
  "armorPenetration": "5-10",
  "statModifiers": {
    "damageTypes": {
      "slashing": "5-10",
      "pyro": "3-6"
    },
    "damageGroups": {
      "physical": "5-10",
      "elemental": "10-15"
    },
    "kineticMastery": "1-2",
    "severedLimbChance": "50-100",
    "maxSeveredLimbs": "0-1",
    "precision": "1-2"
  },
  "passiveBonuses": {
    "Kinetic Mastery": "1-2",
    "Slashing Mastery": "1-3"
  },
  "rollGroups": [
    {
      "pick": 1,
      "from": [
        { "path": "damageTypes.kinetic", "value": "10-20" },
        { "path": "damageTypes.slashing", "value": "10-20" }
      ]
    },
    {
      "pick": 2,
      "from": [
        { "path": "passiveBonuses.Swift Strikes", "value": "1-2" },
        { "path": "passiveBonuses.Kinetic Focus", "value": "1-2" },
        { "path": "passiveBonuses.Slashing Focus", "value": "1-2" },
        { "path": "passiveBonuses.Physical Mastery", "value": "1-2" }
      ]
    },
    {
      "pick": 1,
      "from": [
        { "path": "criticalChanceModifier", "value": "5-5" }
      ]
    }
  ],
  "wires": {
    "totalSlots": "1-3",
    "blackSlotsMax": 1,
    "colors": { "red": "0-2", "green": "0-2", "blue": "0-2", "black": "0-1" }
  },
  "effects": [
    {
      "trigger": "onCritical",
      "chance": 1.0,
      "action": "applyDebuff",
      "parameters": { "debuffName": "seepingWound", "duration": 10, "useSourceDamage": true }
    }
  ],
  "isDisassembleable": true,
  "disassembleResults": [ { "name": "Scrap Metal", "quantity": 2 } ],
  "description": "Demonstrates every field in one item."
}

Notes
- Any stat can be extended in the future; the generator is tolerant to new numeric fields at top-level and under statModifiers.
- For percent stats at top level (attackSpeedModifier, healthBonusPercent, energyShieldBonusPercent, criticalChanceModifier, criticalMultiplierModifier), define values as % ranges; they will be converted to fractions internally when required by the stats system.
